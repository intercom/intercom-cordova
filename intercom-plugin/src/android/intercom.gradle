buildscript {
    ext {
        pushType = ''
        new XmlSlurper().parse(file('../app/src/main/res/xml/config.xml')).preference.each {
            if (it.@name.text() == 'intercom-android-push-type') {
                pushType = it.@value.text().toLowerCase()
            }
        }
    }
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        if (pushType == 'fcm') {
            classpath 'com.google.gms:google-services:3.2.0'
        }
    }
}

repositories {
    google()
    jcenter()
    maven { url 'https://maven.google.com' }
}

dependencies {
    compile 'io.intercom.android:intercom-sdk-base:5.1.5'
    if (pushType == 'gcm') {
        compile 'io.intercom.android:intercom-sdk-gcm:5.1.5'
    } else if (pushType == 'fcm' || pushType == 'fcm-without-build-plugin') {
        compile 'com.google.firebase:firebase-messaging:11.+'
        compile 'io.intercom.android:intercom-sdk-fcm:5.1.5'
    }
}

def googleServicesJsonPath = '../../../google-services.json'

task copyGoogleServices(type: Copy) {
    from googleServicesJsonPath
    into '.'
}

if (pushType == 'gcm') {
    try {
        def jsonFile = file(googleServicesJsonPath)
        def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text)
        def senderId = parsedJson.project_info.project_number

        android {
            defaultConfig {
                resValue "string", "intercom_gcm_sender_id", senderId
                buildConfigField "String", 'INTERCOM_SENDER_ID', "\"${senderId}\""
            }
        }
    } catch (Exception e) {
        logger.error("Could not read sender ID from google-services.json, falling back to " +
                "`intercom-android-sender-id` preference:" + e.getMessage())
    }

} else if (pushType == 'fcm') {
    tasks.copyGoogleServices.execute()
    apply plugin: com.google.gms.googleservices.GoogleServicesPlugin
} else if (pushType == 'fcm-without-build-plugin') {
    tasks.copyGoogleServices.execute()
    logger.info("Not applying GoogleServicesPlugin from Intercom plugin, another plugin should do this")
}
